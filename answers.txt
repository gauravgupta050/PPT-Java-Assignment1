Q1: What is the difference between Compiler and Interpreter?

Ans:-Compiler:-
1. A compiler is a software program that follows the syntax rule of programming language to convert a source code to machine code.It generates an error message.If written program is correct then the compiler will convert the entire source code into machine code. A compiler converts complete source code into machine code at once. And finally,the program get executes.
2.A compiler translates complete high-level programming code into machine code at once.
3.The code execution time is comparatively less because the program code already gets translated into machine code.
4.It stores the converted machine code from your source code program on the disk.
5. Examples are:-Java, Scala, C#, C, C++ use Compilers.

Interpreter:-
1.An interpreter is also a software program that translates a source code into a machine language. However, an interpreter converts high-level programming language into machine language line-by-line while interpreting and running the program.
2.An interpreter translates one statement of programming code at a time into machine code.
3.They are fairly easy to use and execute, even for a beginner.
4.It never stores the machine code at all on the disk.
5.Examples are:-Perl, Ruby, PHP use Interpreters.


Q2: What is the difference between JDK, JRE, and JVM?

Ans:- JDK:-
1.The JDK is an abbreviation for Java Development Kit.
2.The JDK (Java Development Kit) is a software development kit that develops applications in Java. Along with JRE, the JDK also consists of various development tools (Java Debugger, JavaDoc, compilers, etc.)
3.The JDK primarily assists in executing codes. It primarily functions in development.
4.JDK = Development Tools + JRE (Java Runtime Environment)
5.Since JDK is primarily responsible for the development, it consists of various tools for debugging, monitoring, and developing java applications.
6.JDK = Development Tools + JRE (Java Runtime Environment)

JRE:- 
1.The JRE is an abbreviation for Java Runtime Environment.
2.The Java Runtime Environment (JRE) is an implementation of JVM. It is a type of software package that provides class libraries of Java, JVM, and various other components for running the applications written in Java programming.
3.JRE has a major responsibility for creating an environment for the execution of code.
4.JRE, just like JDK, is also platform-dependent. It means that for every different platform, you require a different JRE.
5.JRE, on the other hand, does not consist of any tool- like a debugger, compiler, etc. It rather contains various supporting files for JVM, and the class libraries that help JVM in running the program.
6.JRE = Libraries for running the application + JVM (Java Virtual Machine)

JVM:-
1.The Java Virtual Machine (JVM) is a platform-independent abstract machine that has three notions in the form of specifications. This document describes the requirement of JVM implementation.
2.JVM specifies all of the implementations. It is responsible for providing all of these implementations to the JRE.
3.The JVM is platform-independent. It means that you won’t require a different JVM for every different platform.
4.JVM does not consist of any tools for software development.
5.JVM = Only the runtime environment that helps in executing the Java bytecode.

Q3: How many types of memory areas are allocated by JVM?

Ans:-JVM (Java Virtual Machine) is an abstract machine,it is a program/software which takes Java bytecode and converts the byte code (line by line) into machine understandable code. 
The JVM divides its memory into five main categories:
1.Class(Method) Area
2.Heap
3.Stack
4.Program Counter Register
5.Native Method Stack

1.Class(Method) Area:-The class method area is the memory block that stores the class code, variable code(static variable, runtime constant) method code, and the constructor of a Java program.
2.Heap:-The Heap area is the memory block where objects are created or objects are stored. Heap memory allocates memory for class interfaces and arrays (an array is an object). It is used to allocate memory to objects at run time.
3.Stack:-Each thread has a private JVM stack, created at the same time as the thread. It is used to store data and partial results which will be needed while returning value for method and performing dynamic linking.Java Stack stores frames and a new frame is created each time at every invocation of the method. A frame is destroyed when its method invocation completes
4.Program Counter Register:- Each JVM thread that carries out the task of a specific method has a program counter register associated with it. The non-native method has a PC that stores the address of the available JVM instruction whereas, in a native method, the value of the program counter is undefined. PC register is capable of storing the return address or a native pointer on some specific platform.
5.Native Method Stack:- Native method stacks are not written in Java language. This memory is allocated for each thread when it’s created And it can be of a fixed or dynamic nature.


Q4: What is JIT compiler?

Ans:-The JIT or Just-In-Time compiler is an essential part of the JRE (Java Runtime Environment), that is responsible for performance optimization of java based applications during run time. The compiler is one of the key aspects in deciding the performance of an application.
JIT compilers interact with the Java Virtual Machine (JVM) at run time and compile suitable bytecode sequences into native machine code. While using a JIT compiler, the hardware is able to execute the native code, as compared to having the JVM interpret the same sequence of bytecode repeatedly and incurring overhead for the translation process. This subsequently leads to performance gains in the execution speed, unless the compiled methods are executed less frequently. 
The JIT compiler is able to perform certain simple optimizations while compiling a series of bytecode to native machine language. Some of these optimizations performed by JIT compilers are data analysis, reduction of memory accesses by register allocation, translation from stack operations to register operations, elimination of common sub-expressions, etc. The greater the degree of optimization done, the more time a JIT compiler spends in the execution stage. Therefore it cannot afford to do all the optimizations that a static compiler is capable of, because of the extra overhead added to the execution time and moreover its view of the program is also restricted. 


Q5: What are the various access specifiers in Java?

Ans:-Access modifiers are keywords that can be used to control the visibility of fields, methods, and constructors in a class.
The four access modifiers in Java are public, protected, default, and private.
Four Types of Access Modifiers:
Private: It can access the private modifier only within the same class and not from outside the class.
Default: It can access the default modifier only within the same package and not from outside the package. And also, if do not specify any access modifier it will automatically consider it as default.
Protected: It can access the protected modifier within the same package and also from outside the package with the help of the child class. If do not make the child class, we cannot access it from outside the package. So inheritance is a must for accessing it from outside the package.
Public: It can access the public modifier from anywhere. It can access public modifiers from within the class as well as from outside the class and also within the package and outside the package.


Q6: What is a compiler in Java?

Ans:-A compiler is a software program that follows the syntax rule of programming language to convert a source code to machine code.It generates an error message.If written program is correct then the compiler will convert the entire source code into machine code. A compiler converts complete source code into machine code at once. And finally,the program get executes.A compiler translates complete high-level programming code into machine code at once.The code execution time is comparatively less because the program code already gets translated into machine code.It stores the converted machine code from your source code program on the disk.
Examples are:-Java, Scala, C#, C, C++ use Compilers.


Q7: Explain the types of variables in Java?

Ans:-variables can be classified into three main types: 
1.local variables
2.instance variables 
3.static variables
1.Local variable: These variables are declared and used within a specific method, constructor, or block of code. They are only accessible within the scope in which they are defined. Local variables must be initialized before they can be used.
2.Instance variable: These variables are declared within a class but outside any method, constructor, or block of code. They are associated with individual instances (objects) of the class. Each instance of the class has its own copy of the instance variables. Instance variables are initialized to their default values if not explicitly assigned.
3.Static variable: These variables are declared with the static keyword within a class but outside any method, constructor, or block of code. They are associated with the class itself rather than with instances of the class. Static variables are shared among all instances of the class, and changes to the variable will be reflected in all instances. Static variables are initialized to their default values if not explicitly assigned.


Q8: What are the Datatypes in Java?

Ans:-Data types are divided into two groups:
Primitive data types - byte, short, int, long, float, double, boolean and char
Non-primitive data types - String, Arrays and Classes
A primitive data type specifies the size and type of variable values, and it has no additional methods.
There are eight primitive data types in Java:
byte	1 byte	Stores whole numbers 
short	2 bytes	Stores whole numbers  
int	4 bytes	Stores whole numbers 
long	8 bytes	Stores whole numbers 
float	4 bytes	Stores fractional numbers
double	8 bytes	Stores fractional numbers 
boolean	1 bit	Stores true or false values
char	2 bytes	Stores a single character/letter or ASCII values

Non-primitive data types are called reference types because they refer to objects.

The main difference between primitive and non-primitive data types are:

Primitive types are predefined (already defined) in Java. Non-primitive types are created by the programmer and is not defined by Java (except for String).
Non-primitive types can be used to call methods to perform certain operations, while primitive types cannot.
A primitive type has always a value, while non-primitive types can be null.
A primitive type starts with a lowercase letter, while non-primitive types starts with an uppercase letter.
Examples of non-primitive types are Strings, Arrays, Classes, Interface, etc.


Q9: What are the identifiers in java?

Ans:- Identifiers in Java are symbolic names used for identification. They can be a class name, variable name, method name, package name, constant name, and more.In Java, There are some reserved words that can not be used as an identifier.All Java variables must be identified with unique names.These unique names are called identifiers.

Que10.Explain the architecture of JVM 

Ans:- JVM (Java Virtual Machine) is an abstract machine. It is a specification that provides runtime environment in which java bytecode can be executed.JVMs are available for many hardware and software platforms (i.e. JVM is platform dependent).
It is:
A specification where working of Java Virtual Machine is specified. But implementation provider is independent to choose the algorithm. Its implementation has been provided by Oracle and other companies.
An implementation Its implementation is known as JRE (Java Runtime Environment).

The JVM performs following operation:
Loads code
Verifies code
Executes code
Provides runtime environment
JVM provides definitions for the:

Memory area
Class file format
Register set
Garbage-collected heap
Fatal error reporting etc.

Classloader
Classloader is a subsystem of JVM which is used to load class files. Whenever run the java program, it is loaded first by the classloader. There are three built-in classloaders in Java.

Bootstrap ClassLoader: This is the first classloader which is the super class of Extension classloader. It loads the rt.jar file which contains all class files of Java Standard Edition like java.lang package classes, java.net package classes, java.util package classes, java.io package classes, java.sql package classes etc.

Extension ClassLoader: This is the child classloader of Bootstrap and parent classloader of System classloader. It loades the jar files located inside $JAVA_HOME/jre/lib/ext directory.
System/Application ClassLoader: This is the child classloader of Extension classloader. It loads the classfiles from classpath. By default, classpath is set to current directory. You can change the classpath using "-cp" or "-classpath" switch. It is also known as Application classloader.

2) Class(Method) Area
Class(Method) Area stores per-class structures such as the runtime constant pool, field and method data, the code for methods.

3) Heap
It is the runtime data area in which objects are allocated.

4) Stack
Java Stack stores frames. It holds local variables and partial results,a part in method invocation and return.Each thread has a private JVM stack, created at the same time as thread.A new frame is created each time a method is invoked. A frame is destroyed when its method invocation completes.

5) Program Counter Register
Program counter register contains the address of the Java virtual machine instruction currently being executed.

6) Native Method Stack
It contains all the native methods used in the application.

7) Execution Engine
A virtual processor
Interpreter: Read bytecode stream then execute the instructions.
Just-In-Time(JIT) compiler: It is used to improve the performance. JIT compiles parts of the byte code that have similar functionality at the same time, and hence reduces the amount of time needed for compilation. Here, the term "compiler" refers to a translator from the instruction set of a Java virtual machine (JVM) to the instruction set of a specific CPU.

8) Java Native Interface
Java Native Interface (JNI) is a framework which provides an interface to communicate with another application written in another language like C, C++, Assembly etc. Java uses JNI framework to send output to the Console or interact with OS libraries.
